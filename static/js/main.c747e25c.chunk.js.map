{"version":3,"sources":["components/Filter/filter.module.css","redux/contacts/contacts-actions.js","components/ContactsForm/ContactsForm.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactsList/contactsList.module.css","components/ContactsForm/contactsForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","ContactsForm","state","nameInputId","numberInputId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","onSubmit","props","reset","this","className","styles","form","htmlFor","name_input","onChange","type","pattern","title","required","number_input","add_Btn","Component","connect","dispatch","contactsActions","getVisibleContacts","allContacts","filter","normalizedFilter","toLocaleLowerCase","contact","includes","contacts","onDelete","contacts_block","contacts_title","map","contact_item","onClick","target","searchWrap","App","createReducer","actions","alert","checkName","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c747e25c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchWrap\":\"filter_searchWrap__3TG7j\",\"title\":\"filter_title__212N-\"};","// import types from './contacts-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { createAction } from '@reduxjs/toolkit';\n\n//before toolkit\n// const addContact = ({ name, number }) => ({\n//   type: types.ADD,\n//   payload: {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   },\n// });\n\n// const deleteContact = contactId => ({\n//   type: types.DELETE,\n//   payload: contactId,\n// });\n\n// const changeFilter = value => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n\n//with toolkit\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\nconst deleteContact = createAction('contacts/delete');\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport default { addContact, deleteContact, changeFilter };\n","import styles from './contactsForm.module.css';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nclass ContactsForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n    // this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <h2>Phonebook</h2>\n        <div className={styles.form}>\n          <label htmlFor={this.nameInputId} className={styles.name_input}>\n            <span>Name</span>\n            <input\n              onChange={this.handleChange}\n              id={this.nameInputId}\n              type=\"text\"\n              name=\"name\"\n              value={this.state.name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n\n          <label htmlFor={this.numberInputId} className={styles.number_input}>\n            <span>Number</span>\n            <input\n              onChange={this.handleChange}\n              id={this.numberInputId}\n              type=\"tel\"\n              name=\"number\"\n              value={this.state.number}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n            <button type=\"submit\" className={styles.add_Btn}>\n              Add contact\n            </button>\n          </label>\n        </div>\n      </form>\n    );\n  }\n}\n\nContactsForm.propTypes = {\n  initialState: PropTypes.object,\n  onSubmit: PropTypes.func,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: value => dispatch(contactsActions.addContact(value)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactsForm);\n","import styles from './contactsList.module.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\nconst ContactsList = ({ contacts, onDelete }) => {\n  return (\n    <div className={styles.contacts_block}>\n      <span className={styles.contacts_title}>Contacts:</span>\n      <ul>\n        {contacts.map(({ name, number, id }) => (\n          <li className={styles.contact_item} key={id}>\n            <span className={styles.name}>{name}</span>\n            <span className={styles.number}>{number}</span>\n            <button onClick={() => onDelete(id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\nContactsList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLocaleLowerCase();\n\n  return allContacts.filter(contact =>\n    contact.name.toLocaleLowerCase().includes(normalizedFilter),\n  );\n};\n\n// const mapStateToProps = state => {\n//   const { contacts, filter } = state.contacts;\n//   const visibleContacts = getVisibleContacts(contacts, filter);\n\n//   return {\n//     contacts: visibleContacts,\n//   };\n// };\n\nconst mapStateToProps = ({ contacts: { contacts, filter } }) => ({\n  contacts: getVisibleContacts(contacts, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(contactsActions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import styles from './filter.module.css';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={styles.searchWrap}>\n    <span className={styles.title}>Find contacts by name:</span>\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from 'react';\nimport ContactsForm from './components/ContactsForm';\nimport ContactsList from './components/ContactsList';\nimport Filter from './components/Filter';\nimport './styles.css';\n// import { v4 as uuidv4 } from 'uuid';\n\nclass App extends Component {\n  // state = {\n  //   contacts: [],\n  //   filter: '',\n  // };\n\n  // addContact = ({ name, number }) => {\n  // const checkedName = this.state.contacts\n  //   .map(contact => contact.name)\n  //   .includes(name);\n\n  // if (checkedName) {\n  //   alert(`${name} is already in contacts`);\n  //   return;\n  // }\n\n  //   this.setState(prevState => ({\n  //     contacts: [{ id: uuidv4(), name, number }, ...prevState.contacts],\n  //   }));\n  // };\n\n  // deleteContact = contactId => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n  //   }));\n  // };\n\n  // changeFilter = e => {\n  //   this.setState({\n  //     filter: e.currentTarget.value,\n  //   });\n  // };\n\n  // getVisibleContacts = () => {\n  //   const { contacts, filter } = this.state;\n  //   const normalizedFilter = filter.toLocaleLowerCase();\n\n  //   return contacts.filter(contact =>\n  //     contact.name.toLocaleLowerCase().includes(normalizedFilter),\n  //   );\n  // };\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     console.log('changes');\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  render() {\n    // const visibleContacts = this.getVisibleContacts();\n    // const { filter } = this.state;\n    return (\n      <div className=\"app\">\n        <ContactsForm />\n        <Filter />\n        <ContactsList />\n      </div>\n    );\n  }\n}\nexport default App;\n\n// contacts: [\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ],\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-actions';\n// import types from './contacts-types';\n//before toolkit\n// const contacts = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       //   const checkedName = state\n//       //     .map(contact => contact.name)\n//       //     .includes(payload.name);\n\n//       //   if (checkedName) {\n//       //     alert(`${payload.name} is already in contacts`);\n//       //     return;\n//       //   }\n//       return [...state, payload];\n\n//     case types.DELETE:\n//       return state.filter(({ id }) => id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\n//with toolkit\n\nconst checkName = (state, { payload }) => {\n  const checkedName = state.map(contact => contact.name).includes(payload.name);\n  if (checkedName) {\n    alert(`${payload.name} is already in contacts`);\n    return;\n  }\n  return [...state, payload];\n};\n\nconst contacts = createReducer([], {\n  [actions.addContact]: (state, { payload }) => checkName(state, { payload }),\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  contacts,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n//before toolkit\n// import { combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n//with toolkit\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n// const rootReducer = combineReducers({\n//   contacts: persistReducer(persistConfig, contactsReducer),\n// });\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"contactsList_name__3OkeU\",\"contacts_block\":\"contactsList_contacts_block__15lQl\",\"contact_item\":\"contactsList_contact_item__1N_G3\",\"contacts_title\":\"contactsList_contacts_title__3Kxou\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"contactsForm_form__2v-iC\",\"add_Btn\":\"contactsForm_add_Btn__2YOYD\",\"name_input\":\"contactsForm_name_input__3gjZp\",\"number_input\":\"contactsForm_number_input__4ztsY\"};"],"sourceRoot":""}